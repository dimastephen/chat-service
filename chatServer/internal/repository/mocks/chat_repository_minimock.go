// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/dimastephen/chatServer/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/dimastephen/chatServer/internal/model"
	"github.com/gojuno/minimock/v3"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, info *model.CreateInfo) (cp1 *model.CreateInfo, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, info *model.CreateInfo)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mChatRepositoryMockCreate

	funcDelete          func(ctx context.Context, info *model.DeleteInfo) (err error)
	funcDeleteOrigin    string
	inspectFuncDelete   func(ctx context.Context, info *model.DeleteInfo)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mChatRepositoryMockDelete

	funcLogAction          func(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo) (err error)
	funcLogActionOrigin    string
	inspectFuncLogAction   func(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo)
	afterLogActionCounter  uint64
	beforeLogActionCounter uint64
	LogActionMock          mChatRepositoryMockLogAction
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mChatRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*ChatRepositoryMockCreateParams{}

	m.DeleteMock = mChatRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*ChatRepositoryMockDeleteParams{}

	m.LogActionMock = mChatRepositoryMockLogAction{mock: m}
	m.LogActionMock.callArgs = []*ChatRepositoryMockLogActionParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockCreate struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateExpectation
	expectations       []*ChatRepositoryMockCreateExpectation

	callArgs []*ChatRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateExpectation specifies expectation struct of the ChatRepository.Create
type ChatRepositoryMockCreateExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateParams
	paramPtrs          *ChatRepositoryMockCreateParamPtrs
	expectationOrigins ChatRepositoryMockCreateExpectationOrigins
	results            *ChatRepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateParams contains parameters of the ChatRepository.Create
type ChatRepositoryMockCreateParams struct {
	ctx  context.Context
	info *model.CreateInfo
}

// ChatRepositoryMockCreateParamPtrs contains pointers to parameters of the ChatRepository.Create
type ChatRepositoryMockCreateParamPtrs struct {
	ctx  *context.Context
	info **model.CreateInfo
}

// ChatRepositoryMockCreateResults contains results of the ChatRepository.Create
type ChatRepositoryMockCreateResults struct {
	cp1 *model.CreateInfo
	err error
}

// ChatRepositoryMockCreateOrigins contains origins of expectations of the ChatRepository.Create
type ChatRepositoryMockCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mChatRepositoryMockCreate) Optional() *mChatRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) Expect(ctx context.Context, info *model.CreateInfo) *mChatRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &ChatRepositoryMockCreateParams{ctx, info}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectInfoParam2 sets up expected param info for ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) ExpectInfoParam2(info *model.CreateInfo) *mChatRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.info = &info
	mmCreate.defaultExpectation.expectationOrigins.originInfo = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) Inspect(f func(ctx context.Context, info *model.CreateInfo)) *mChatRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) Return(cp1 *model.CreateInfo, err error) *ChatRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ChatRepositoryMockCreateResults{cp1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the ChatRepository.Create method
func (mmCreate *mChatRepositoryMockCreate) Set(f func(ctx context.Context, info *model.CreateInfo) (cp1 *model.CreateInfo, err error)) *ChatRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the ChatRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the ChatRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the ChatRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mChatRepositoryMockCreate) When(ctx context.Context, info *model.CreateInfo) *ChatRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &ChatRepositoryMockCreateParams{ctx, info},
		expectationOrigins: ChatRepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.Create return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateExpectation) Then(cp1 *model.CreateInfo, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateResults{cp1, err}
	return e.mock
}

// Times sets number of times ChatRepository.Create should be invoked
func (mmCreate *mChatRepositoryMockCreate) Times(n uint64) *mChatRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of ChatRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mChatRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_repository.ChatRepository
func (mmCreate *ChatRepositoryMock) Create(ctx context.Context, info *model.CreateInfo) (cp1 *model.CreateInfo, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, info)
	}

	mm_params := ChatRepositoryMockCreateParams{ctx, info}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateParams{ctx, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("ChatRepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmCreate.t.Errorf("ChatRepositoryMock.Create got unexpected parameter info, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originInfo, *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ChatRepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ChatRepositoryMock.Create")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, info)
	}
	mmCreate.t.Fatalf("Unexpected call to ChatRepositoryMock.Create. %v %v", ctx, info)
	return
}

// CreateAfterCounter returns a count of finished ChatRepositoryMock.Create invocations
func (mmCreate *ChatRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ChatRepositoryMock.Create invocations
func (mmCreate *ChatRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mChatRepositoryMockCreate) Calls() []*ChatRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mChatRepositoryMockDelete struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteExpectation
	expectations       []*ChatRepositoryMockDeleteExpectation

	callArgs []*ChatRepositoryMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteExpectation specifies expectation struct of the ChatRepository.Delete
type ChatRepositoryMockDeleteExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteParams
	paramPtrs          *ChatRepositoryMockDeleteParamPtrs
	expectationOrigins ChatRepositoryMockDeleteExpectationOrigins
	results            *ChatRepositoryMockDeleteResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteParams contains parameters of the ChatRepository.Delete
type ChatRepositoryMockDeleteParams struct {
	ctx  context.Context
	info *model.DeleteInfo
}

// ChatRepositoryMockDeleteParamPtrs contains pointers to parameters of the ChatRepository.Delete
type ChatRepositoryMockDeleteParamPtrs struct {
	ctx  *context.Context
	info **model.DeleteInfo
}

// ChatRepositoryMockDeleteResults contains results of the ChatRepository.Delete
type ChatRepositoryMockDeleteResults struct {
	err error
}

// ChatRepositoryMockDeleteOrigins contains origins of expectations of the ChatRepository.Delete
type ChatRepositoryMockDeleteExpectationOrigins struct {
	origin     string
	originCtx  string
	originInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mChatRepositoryMockDelete) Optional() *mChatRepositoryMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) Expect(ctx context.Context, info *model.DeleteInfo) *mChatRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &ChatRepositoryMockDeleteParams{ctx, info}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx
	mmDelete.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectInfoParam2 sets up expected param info for ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) ExpectInfoParam2(info *model.DeleteInfo) *mChatRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.info = &info
	mmDelete.defaultExpectation.expectationOrigins.originInfo = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) Inspect(f func(ctx context.Context, info *model.DeleteInfo)) *mChatRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) Return(err error) *ChatRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &ChatRepositoryMockDeleteResults{err}
	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the ChatRepository.Delete method
func (mmDelete *mChatRepositoryMockDelete) Set(f func(ctx context.Context, info *model.DeleteInfo) (err error)) *ChatRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the ChatRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the ChatRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the ChatRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mChatRepositoryMockDelete) When(ctx context.Context, info *model.DeleteInfo) *ChatRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &ChatRepositoryMockDeleteParams{ctx, info},
		expectationOrigins: ChatRepositoryMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.Delete return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.Delete should be invoked
func (mmDelete *mChatRepositoryMockDelete) Times(n uint64) *mChatRepositoryMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of ChatRepositoryMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mChatRepositoryMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_repository.ChatRepository
func (mmDelete *ChatRepositoryMock) Delete(ctx context.Context, info *model.DeleteInfo) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, info)
	}

	mm_params := ChatRepositoryMockDeleteParams{ctx, info}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteParams{ctx, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("ChatRepositoryMock.Delete got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmDelete.t.Errorf("ChatRepositoryMock.Delete got unexpected parameter info, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originInfo, *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("ChatRepositoryMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the ChatRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, info)
	}
	mmDelete.t.Fatalf("Unexpected call to ChatRepositoryMock.Delete. %v %v", ctx, info)
	return
}

// DeleteAfterCounter returns a count of finished ChatRepositoryMock.Delete invocations
func (mmDelete *ChatRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of ChatRepositoryMock.Delete invocations
func (mmDelete *ChatRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mChatRepositoryMockDelete) Calls() []*ChatRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mChatRepositoryMockLogAction struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockLogActionExpectation
	expectations       []*ChatRepositoryMockLogActionExpectation

	callArgs []*ChatRepositoryMockLogActionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockLogActionExpectation specifies expectation struct of the ChatRepository.LogAction
type ChatRepositoryMockLogActionExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockLogActionParams
	paramPtrs          *ChatRepositoryMockLogActionParamPtrs
	expectationOrigins ChatRepositoryMockLogActionExpectationOrigins
	results            *ChatRepositoryMockLogActionResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockLogActionParams contains parameters of the ChatRepository.LogAction
type ChatRepositoryMockLogActionParams struct {
	ctx    context.Context
	create *model.CreateInfo
	delete *model.DeleteInfo
}

// ChatRepositoryMockLogActionParamPtrs contains pointers to parameters of the ChatRepository.LogAction
type ChatRepositoryMockLogActionParamPtrs struct {
	ctx    *context.Context
	create **model.CreateInfo
	delete **model.DeleteInfo
}

// ChatRepositoryMockLogActionResults contains results of the ChatRepository.LogAction
type ChatRepositoryMockLogActionResults struct {
	err error
}

// ChatRepositoryMockLogActionOrigins contains origins of expectations of the ChatRepository.LogAction
type ChatRepositoryMockLogActionExpectationOrigins struct {
	origin       string
	originCtx    string
	originCreate string
	originDelete string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogAction *mChatRepositoryMockLogAction) Optional() *mChatRepositoryMockLogAction {
	mmLogAction.optional = true
	return mmLogAction
}

// Expect sets up expected params for ChatRepository.LogAction
func (mmLogAction *mChatRepositoryMockLogAction) Expect(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo) *mChatRepositoryMockLogAction {
	if mmLogAction.mock.funcLogAction != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Set")
	}

	if mmLogAction.defaultExpectation == nil {
		mmLogAction.defaultExpectation = &ChatRepositoryMockLogActionExpectation{}
	}

	if mmLogAction.defaultExpectation.paramPtrs != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by ExpectParams functions")
	}

	mmLogAction.defaultExpectation.params = &ChatRepositoryMockLogActionParams{ctx, create, delete}
	mmLogAction.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogAction.expectations {
		if minimock.Equal(e.params, mmLogAction.defaultExpectation.params) {
			mmLogAction.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogAction.defaultExpectation.params)
		}
	}

	return mmLogAction
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.LogAction
func (mmLogAction *mChatRepositoryMockLogAction) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockLogAction {
	if mmLogAction.mock.funcLogAction != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Set")
	}

	if mmLogAction.defaultExpectation == nil {
		mmLogAction.defaultExpectation = &ChatRepositoryMockLogActionExpectation{}
	}

	if mmLogAction.defaultExpectation.params != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Expect")
	}

	if mmLogAction.defaultExpectation.paramPtrs == nil {
		mmLogAction.defaultExpectation.paramPtrs = &ChatRepositoryMockLogActionParamPtrs{}
	}
	mmLogAction.defaultExpectation.paramPtrs.ctx = &ctx
	mmLogAction.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLogAction
}

// ExpectCreateParam2 sets up expected param create for ChatRepository.LogAction
func (mmLogAction *mChatRepositoryMockLogAction) ExpectCreateParam2(create *model.CreateInfo) *mChatRepositoryMockLogAction {
	if mmLogAction.mock.funcLogAction != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Set")
	}

	if mmLogAction.defaultExpectation == nil {
		mmLogAction.defaultExpectation = &ChatRepositoryMockLogActionExpectation{}
	}

	if mmLogAction.defaultExpectation.params != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Expect")
	}

	if mmLogAction.defaultExpectation.paramPtrs == nil {
		mmLogAction.defaultExpectation.paramPtrs = &ChatRepositoryMockLogActionParamPtrs{}
	}
	mmLogAction.defaultExpectation.paramPtrs.create = &create
	mmLogAction.defaultExpectation.expectationOrigins.originCreate = minimock.CallerInfo(1)

	return mmLogAction
}

// ExpectDeleteParam3 sets up expected param delete for ChatRepository.LogAction
func (mmLogAction *mChatRepositoryMockLogAction) ExpectDeleteParam3(delete *model.DeleteInfo) *mChatRepositoryMockLogAction {
	if mmLogAction.mock.funcLogAction != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Set")
	}

	if mmLogAction.defaultExpectation == nil {
		mmLogAction.defaultExpectation = &ChatRepositoryMockLogActionExpectation{}
	}

	if mmLogAction.defaultExpectation.params != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Expect")
	}

	if mmLogAction.defaultExpectation.paramPtrs == nil {
		mmLogAction.defaultExpectation.paramPtrs = &ChatRepositoryMockLogActionParamPtrs{}
	}
	mmLogAction.defaultExpectation.paramPtrs.delete = &delete
	mmLogAction.defaultExpectation.expectationOrigins.originDelete = minimock.CallerInfo(1)

	return mmLogAction
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.LogAction
func (mmLogAction *mChatRepositoryMockLogAction) Inspect(f func(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo)) *mChatRepositoryMockLogAction {
	if mmLogAction.mock.inspectFuncLogAction != nil {
		mmLogAction.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.LogAction")
	}

	mmLogAction.mock.inspectFuncLogAction = f

	return mmLogAction
}

// Return sets up results that will be returned by ChatRepository.LogAction
func (mmLogAction *mChatRepositoryMockLogAction) Return(err error) *ChatRepositoryMock {
	if mmLogAction.mock.funcLogAction != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Set")
	}

	if mmLogAction.defaultExpectation == nil {
		mmLogAction.defaultExpectation = &ChatRepositoryMockLogActionExpectation{mock: mmLogAction.mock}
	}
	mmLogAction.defaultExpectation.results = &ChatRepositoryMockLogActionResults{err}
	mmLogAction.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogAction.mock
}

// Set uses given function f to mock the ChatRepository.LogAction method
func (mmLogAction *mChatRepositoryMockLogAction) Set(f func(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo) (err error)) *ChatRepositoryMock {
	if mmLogAction.defaultExpectation != nil {
		mmLogAction.mock.t.Fatalf("Default expectation is already set for the ChatRepository.LogAction method")
	}

	if len(mmLogAction.expectations) > 0 {
		mmLogAction.mock.t.Fatalf("Some expectations are already set for the ChatRepository.LogAction method")
	}

	mmLogAction.mock.funcLogAction = f
	mmLogAction.mock.funcLogActionOrigin = minimock.CallerInfo(1)
	return mmLogAction.mock
}

// When sets expectation for the ChatRepository.LogAction which will trigger the result defined by the following
// Then helper
func (mmLogAction *mChatRepositoryMockLogAction) When(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo) *ChatRepositoryMockLogActionExpectation {
	if mmLogAction.mock.funcLogAction != nil {
		mmLogAction.mock.t.Fatalf("ChatRepositoryMock.LogAction mock is already set by Set")
	}

	expectation := &ChatRepositoryMockLogActionExpectation{
		mock:               mmLogAction.mock,
		params:             &ChatRepositoryMockLogActionParams{ctx, create, delete},
		expectationOrigins: ChatRepositoryMockLogActionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogAction.expectations = append(mmLogAction.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.LogAction return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockLogActionExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockLogActionResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.LogAction should be invoked
func (mmLogAction *mChatRepositoryMockLogAction) Times(n uint64) *mChatRepositoryMockLogAction {
	if n == 0 {
		mmLogAction.mock.t.Fatalf("Times of ChatRepositoryMock.LogAction mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogAction.expectedInvocations, n)
	mmLogAction.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogAction
}

func (mmLogAction *mChatRepositoryMockLogAction) invocationsDone() bool {
	if len(mmLogAction.expectations) == 0 && mmLogAction.defaultExpectation == nil && mmLogAction.mock.funcLogAction == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogAction.mock.afterLogActionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogAction.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// LogAction implements mm_repository.ChatRepository
func (mmLogAction *ChatRepositoryMock) LogAction(ctx context.Context, create *model.CreateInfo, delete *model.DeleteInfo) (err error) {
	mm_atomic.AddUint64(&mmLogAction.beforeLogActionCounter, 1)
	defer mm_atomic.AddUint64(&mmLogAction.afterLogActionCounter, 1)

	mmLogAction.t.Helper()

	if mmLogAction.inspectFuncLogAction != nil {
		mmLogAction.inspectFuncLogAction(ctx, create, delete)
	}

	mm_params := ChatRepositoryMockLogActionParams{ctx, create, delete}

	// Record call args
	mmLogAction.LogActionMock.mutex.Lock()
	mmLogAction.LogActionMock.callArgs = append(mmLogAction.LogActionMock.callArgs, &mm_params)
	mmLogAction.LogActionMock.mutex.Unlock()

	for _, e := range mmLogAction.LogActionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmLogAction.LogActionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogAction.LogActionMock.defaultExpectation.Counter, 1)
		mm_want := mmLogAction.LogActionMock.defaultExpectation.params
		mm_want_ptrs := mmLogAction.LogActionMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockLogActionParams{ctx, create, delete}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLogAction.t.Errorf("ChatRepositoryMock.LogAction got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogAction.LogActionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.create != nil && !minimock.Equal(*mm_want_ptrs.create, mm_got.create) {
				mmLogAction.t.Errorf("ChatRepositoryMock.LogAction got unexpected parameter create, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogAction.LogActionMock.defaultExpectation.expectationOrigins.originCreate, *mm_want_ptrs.create, mm_got.create, minimock.Diff(*mm_want_ptrs.create, mm_got.create))
			}

			if mm_want_ptrs.delete != nil && !minimock.Equal(*mm_want_ptrs.delete, mm_got.delete) {
				mmLogAction.t.Errorf("ChatRepositoryMock.LogAction got unexpected parameter delete, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogAction.LogActionMock.defaultExpectation.expectationOrigins.originDelete, *mm_want_ptrs.delete, mm_got.delete, minimock.Diff(*mm_want_ptrs.delete, mm_got.delete))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogAction.t.Errorf("ChatRepositoryMock.LogAction got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogAction.LogActionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogAction.LogActionMock.defaultExpectation.results
		if mm_results == nil {
			mmLogAction.t.Fatal("No results are set for the ChatRepositoryMock.LogAction")
		}
		return (*mm_results).err
	}
	if mmLogAction.funcLogAction != nil {
		return mmLogAction.funcLogAction(ctx, create, delete)
	}
	mmLogAction.t.Fatalf("Unexpected call to ChatRepositoryMock.LogAction. %v %v %v", ctx, create, delete)
	return
}

// LogActionAfterCounter returns a count of finished ChatRepositoryMock.LogAction invocations
func (mmLogAction *ChatRepositoryMock) LogActionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogAction.afterLogActionCounter)
}

// LogActionBeforeCounter returns a count of ChatRepositoryMock.LogAction invocations
func (mmLogAction *ChatRepositoryMock) LogActionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogAction.beforeLogActionCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.LogAction.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogAction *mChatRepositoryMockLogAction) Calls() []*ChatRepositoryMockLogActionParams {
	mmLogAction.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockLogActionParams, len(mmLogAction.callArgs))
	copy(argCopy, mmLogAction.callArgs)

	mmLogAction.mutex.RUnlock()

	return argCopy
}

// MinimockLogActionDone returns true if the count of the LogAction invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockLogActionDone() bool {
	if m.LogActionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LogActionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LogActionMock.invocationsDone()
}

// MinimockLogActionInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockLogActionInspect() {
	for _, e := range m.LogActionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.LogAction at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLogActionCounter := mm_atomic.LoadUint64(&m.afterLogActionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LogActionMock.defaultExpectation != nil && afterLogActionCounter < 1 {
		if m.LogActionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.LogAction at\n%s", m.LogActionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.LogAction at\n%s with params: %#v", m.LogActionMock.defaultExpectation.expectationOrigins.origin, *m.LogActionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogAction != nil && afterLogActionCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.LogAction at\n%s", m.funcLogActionOrigin)
	}

	if !m.LogActionMock.invocationsDone() && afterLogActionCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.LogAction at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LogActionMock.expectedInvocations), m.LogActionMock.expectedInvocationsOrigin, afterLogActionCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockLogActionInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockLogActionDone()
}
