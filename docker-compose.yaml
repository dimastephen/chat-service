services:
  redis:
    image: redis:7
    command: redis-server --requirepass "authredis"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chat-network
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 2s
      retries: 2
  pg:
    image: postgres:17.2-alpine3.20
    env_file:
      - .env
    environment:
      POSTGRES_USER: chat-user
      POSTGRES_PASSWORD: chat-password
      POSTGRES_DB: chat
    ports:
      - "54321:5432"
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      - chat-network

  auth-service:
    build:
      context: .
      dockerfile: auth/Dockerfile
      no_cache: true
    env_file: .env
    depends_on:
      pg:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    ports:
      - "50052:50052"
    networks:
      - chat-network
    command: ["./server", "-config=.env", "-loglvl=${INFOLEVEL}"]


  chat-service:
    build:
      context: .
      dockerfile: chat/Dockerfile
      no_cache: true
    env_file: .env
    depends_on:
      pg:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    ports:
      - "8081:8081"
      - "8090:8090"
      - "50051:50051"
    networks:
      - chat-network
    command: ["./chat_server", "-config=.env", "-loglvl=${DEBUGLEVEL}"]


volumes:
  redis-data:
  postgres_volume:

networks:
  chat-network:
    driver: bridge